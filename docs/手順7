# テストの実装

## 背景

AI Process Blueprintの信頼性と品質を確保するために、包括的なテストスイートが必要です。テストはコアロジック、APIエンドポイント、MCPツールをカバーし、エラーケースやエッジケースも含める必要があります。

## 目的

- ユニットテスト、統合テスト、エンドツーエンドテストの実装
- テストカバレッジの向上
- 継続的インテグレーションでのテスト自動化の準備
- リファクタリングや新機能追加時の回帰を防止

## タスク

1. テスト環境のセットアップ
   - `tests` ディレクトリの構造化
   ```
   tests/
   ├── conftest.py           # 共通テストフィクスチャ
   ├── test_api/             # APIテスト
   │   ├── __init__.py
   │   └── test_routes.py
   ├── test_core/            # コアサービステスト
   │   ├── __init__.py
   │   └── test_services.py
   ├── test_data/            # データアクセステスト
   │   ├── __init__.py
   │   └── test_repository.py
   ├── test_mcp/             # MCPテスト
   │   ├── __init__.py
   │   └── test_tools.py
   └── test_integration/     # 統合テスト
       ├── __init__.py
       └── test_app.py
   ```

2. 共通テストフィクスチャの実装
   - `conftest.py` にテスト用フィクスチャを実装
   ```python
   import os
   import pytest
   import shutil
   from fastapi.testclient import TestClient
   from app.main import app
   from app.core.services import TemplateService
   from app.data.repository import FileSystemTemplateRepository
   
   @pytest.fixture
   def test_template_dir(tmp_path):
       """テスト用の一時テンプレートディレクトリを作成"""
       template_dir = tmp_path / "templates"
       template_dir.mkdir()
       yield template_dir
       # テスト後にクリーンアップ
       shutil.rmtree(template_dir)
   
   @pytest.fixture
   def template_repository(test_template_dir):
       """テスト用のテンプレートリポジトリを作成"""
       return FileSystemTemplateRepository(str(test_template_dir))
   
   @pytest.fixture
   def template_service(template_repository):
       """テスト用のテンプレートサービスを作成"""
       return TemplateService(template_repository)
   
   @pytest.fixture
   def api_client():
       """テスト用のFastAPI TestClientを作成"""
       return TestClient(app)
   
   @pytest.fixture
   def sample_template_data():
       """テスト用のサンプルテンプレートデータを提供"""
       return {
           "title": "テストテンプレート",
           "content": "# テストテンプレート\n\nこれはテスト用のテンプレートです。",
           "description": "テスト用のテンプレート説明",
           "username": "tester"
       }
   ```

3. リポジトリのユニットテストの実装
   - `tests/test_data/test_repository.py` にテストを実装
   ```python
   import pytest
   import os
   from app.schemas.models import TemplateCreate, TemplateUpdate
   
   async def test_create_template(template_repository, sample_template_data):
       # テンプレート作成テスト
       template_create = TemplateCreate(**sample_template_data)
       template = await template_repository.create(template_create)
       
       assert template.title == sample_template_data["title"]
       assert template.content == sample_template_data["content"]
       assert template.description == sample_template_data["description"]
       assert template.username == sample_template_data["username"]
       
       # ファイルが作成されたか確認
       expected_filename = os.path.join(
           template_repository.templates_dir,
           template_repository._title_to_filename(sample_template_data["title"])
       )
       assert os.path.exists(expected_filename)
   
   async def test_get_template(template_repository, sample_template_data):
       # テンプレート作成
       template_create = TemplateCreate(**sample_template_data)
       await template_repository.create(template_create)
       
       # テンプレート取得テスト
       template = await template_repository.get(sample_template_data["title"])
       
       assert template.title == sample_template_data["title"]
       assert template.content == sample_template_data["content"]
   
   # 更新、削除、一覧のテストも実装...
   ```

4. サービスのユニットテストの実装
   - `tests/test_core/test_services.py` にテストを実装
   ```python
   import pytest
   from app.schemas.models import TemplateCreate, TemplateUpdate
   from app.core.exceptions import TemplateNotFoundError, TemplateAlreadyExistsError
   
   async def test_create_template(template_service, sample_template_data):
       # テンプレート作成テスト
       template_create = TemplateCreate(**sample_template_data)
       template = await template_service.create_template(template_create)
       
       assert template.title == sample_template_data["title"]
       assert hasattr(template, "created_at")
       assert hasattr(template, "updated_at")
       
       # 同じタイトルで2回目の作成は失敗するはず
       with pytest.raises(TemplateAlreadyExistsError):
           await template_service.create_template(template_create)
   
   # 他のサービスメソッドのテストも実装...
   ```

5. APIエンドポイントのテストの実装
   - `tests/test_api/test_routes.py` にテストを実装
   ```python
   import pytest
   from fastapi import status
   
   def test_create_template(api_client, sample_template_data):
       # テンプレート作成APIテスト
       response = api_client.post("/api/templates", json=sample_template_data)
       
       assert response.status_code == status.HTTP_201_CREATED
       data = response.json()
       assert data["title"] == sample_template_data["title"]
       assert data["content"] == sample_template_data["content"]
       
       # 同じタイトルで2回目の作成は409エラーになるはず
       response = api_client.post("/api/templates", json=sample_template_data)
       assert response.status_code == status.HTTP_409_CONFLICT
   
   def test_get_template(api_client, sample_template_data):
       # まずテンプレートを作成
       api_client.post("/api/templates", json=sample_template_data)
       
       # テンプレート取得APIテスト
       response = api_client.get(f"/api/templates/{sample_template_data['title']}")
       
       assert response.status_code == status.HTTP_200_OK
       data = response.json()
       assert data["title"] == sample_template_data["title"]
       
       # 存在しないテンプレートの取得は404エラーになるはず
       response = api_client.get("/api/templates/not-exist")
       assert response.status_code == status.HTTP_404_NOT_FOUND
   
   # 他のAPIエンドポイントのテストも実装...
   ```

6. MCPツールのテストの実装
   - `tests/test_mcp/test_tools.py` にテストを実装
   ```python
   import pytest
   from app.mcp.tools import get_template, register_template, update_template, delete_template, list_templates
   
   async def test_get_template_tool(template_service, sample_template_data):
       # サービスを使用してテンプレートを作成
       template_create = TemplateCreate(**sample_template_data)
       await template_service.create_template(template_create)
       
       # MCPツールでのテンプレート取得テスト
       result = await get_template(title=sample_template_data["title"])
       
       assert result["title"] == sample_template_data["title"]
       assert result["content"] == sample_template_data["content"]
       
       # 存在しないテンプレートの取得
       result = await get_template(title="not-exist")
       assert "error" in result
       assert result["error"] == "Template not found"
   
   # 他のMCPツールのテストも実装...
   ```

7. 統合テストの実装
   - `tests/test_integration/test_app.py` にテストを実装
   ```python
   import pytest
   
   async def test_template_workflow(api_client, sample_template_data):
       # テンプレート作成
       create_response = api_client.post("/api/templates", json=sample_template_data)
       assert create_response.status_code == 201
       
       # テンプレート取得
       get_response = api_client.get(f"/api/templates/{sample_template_data['title']}")
       assert get_response.status_code == 200
       
       # テンプレート更新
       update_data = {"description": "更新された説明"}
       update_response = api_client.put(
           f"/api/templates/{sample_template_data['title']}", 
           json=update_data
       )
       assert update_response.status_code == 200
       assert update_response.json()["description"] == "更新された説明"
       
       # テンプレート一覧取得
       list_response = api_client.get("/api/templates")
       assert list_response.status_code == 200
       templates = list_response.json()["templates"]
       assert len(templates) >= 1
       
       # テンプレート削除
       delete_response = api_client.delete(f"/api/templates/{sample_template_data['title']}")
       assert delete_response.status_code == 204
       
       # 削除確認
       get_deleted_response = api_client.get(f"/api/templates/{sample_template_data['title']}")
       assert get_deleted_response.status_code == 404
   ```

8. テストカバレッジの設定
   - `.coveragerc` ファイルの作成
   ```ini
   [run]
   source = app
   omit = tests/*
   
   [report]
   exclude_lines =
       pragma: no cover
       def __repr__
       raise NotImplementedError
   ```

9. エラーケースと境界値のテスト
   - 特殊文字を含むテンプレートタイトル
   - 非常に長いタイトルや内容
   - 空の内容や説明
   - 同時アクセス時の挙動

10. CI/CDパイプラインのテスト設定 (オプション)
    - GitHub Actionsなどのワークフロー設定
    ```yaml
    name: Tests
    
    on:
      push:
        branches: [ main ]
      pull_request:
        branches: [ main ]
    
    jobs:
      test:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v2
        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: '3.10'
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
            pip install pytest pytest-asyncio pytest-cov
        - name: Test with pytest
          run: |
            pytest --cov=app
    ```

## 受け入れ基準

- [ ] すべてのユニットテストが実装され、成功する
- [ ] APIエンドポイントのテストが実装され、成功する
- [ ] MCPツールのテストが実装され、成功する
- [ ] 統合テストが実装され、成功する
- [ ] テストカバレッジが80%以上ある
- [ ] すべての主要なエラーケースと境界値テストが実装されている
- [ ] `pytest` コマンドですべてのテストを実行できる
- [ ] CI/CDパイプラインでテストが自動実行される (オプション)

## 実装メモ

### テスト戦略の擬似コード

```
FUNCTION implement_test_suite()
    // 1. ユニットテストの実装
    FOR EACH component IN [repository, service, api, mcp]
        FOR EACH method IN component.methods
            // 正常系テスト
            TEST method_with_valid_inputs()
                // 有効な入力でメソッドを呼び出し
                ASSERT expected_result == actual_result
            END TEST
            
            // 異常系テスト
            TEST method_with_invalid_inputs()
                // 無効な入力でメソッドを呼び出し
                ASSERT raises_expected_exception()
            END TEST
            
            // 境界値テスト
            TEST method_with_edge_cases()
                // 境界値でメソッドを呼び出し
                ASSERT handles_edge_cases_correctly()
            END TEST
        END FOR
    END FOR
    
    // 2. 統合テストの実装
    TEST end_to_end_workflow()
        // 一連の操作を実行
        create_template()
        get_template()
        update_template()
        list_templates()
        delete_template()
        
        // 各ステップの結果を検証
        ASSERT all_operations_succeed()
    END TEST
    
    // 3. ラピッドテストの実施
    FOR i FROM 1 TO 100
        TEST rapid_creation_and_deletion()
            // 高速に作成と削除を繰り返す
            ASSERT no_race_conditions_or_deadlocks()
        END TEST
    END FOR
END FUNCTION
```

### 効果的なテストのためのヒント

1. **テストピラミッド**:
   - ユニットテスト > 統合テスト > エンドツーエンドテスト の比率を維持
   - 低レベルのテストほど多く実装

2. **テスト分離**:
   - 各テストは独立して実行可能に
   - テスト間の依存関係を避ける
   - テスト実行順序に依存しない設計

3. **アサーションの明確化**:
   - 何をテストしているかを明確に
   - 詳細なエラーメッセージの提供

4. **モックとスタブの活用**:
   - 外部依存をモックして独立したテストを実現
   - ファイルシステム操作などの副作用を持つ処理はスタブ化

## 関連資料

- [Pytest 公式ドキュメント](https://docs.pytest.org/)
- [FastAPI Testing ドキュメント](https://fastapi.tiangolo.com/tutorial/testing/)
- [Python Testing Best Practices](https://docs.python-guide.org/writing/tests/)
- [Pytest-AsyncIO ドキュメント](https://pytest-asyncio.readthedocs.io/)
